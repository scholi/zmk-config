/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        COMPOSE {
            bindings = <&kp F24>;
            key-positions = <3 4>;
        };

        a_grave {
            bindings = <&kp LS(SINGLE_QUOTE)>;
            key-positions = <13 25>;
        };

        e_aigu {
            bindings = <&kp LS(SEMICOLON)>;
            key-positions = <20 8>;
        };

        e_grave {
            bindings = <&kp LBRC>;
            key-positions = <20 32>;
        };

        hat {
            bindings = <&kp EQUAL>;
            key-positions = <19 21>;
        };

        e_hat {
            bindings = <&e_hat>;
            key-positions = <21 20 19>;
        };

        AS {
            bindings = <&kp I>;
            key-positions = <13 14>;
        };

        SR {
            bindings = <&kp O>;
            key-positions = <14 15>;
        };

        RT {
            bindings = <&kp E>;
            key-positions = <15 16>;
        };

        TG {
            bindings = <&kp N>;
            key-positions = <16 17>;
        };

        MV {
            bindings = <&kp K>;
            key-positions = <29 28>;
        };

        CM {
            bindings = <&kp L>;
            key-positions = <28 27>;
        };

        XC {
            bindings = <&kp COMMA>;
            key-positions = <26 27>;
        };

        ZX {
            bindings = <&kp DOT>;
            key-positions = <25 26>;
        };

        ZC {
            bindings = <&kp SLASH>;
            key-positions = <25 27>;
        };

        QD {
            bindings = <&kp P>;
            key-positions = <2 1>;
        };

        DH {
            bindings = <&kp U>;
            key-positions = <2 3>;
        };

        WB {
            bindings = <&kp F>;
            key-positions = <4 5>;
        };

        QH {
            bindings = <&kp Z>;
            key-positions = <1 3>;
        };

        DW {
            bindings = <&kp J>;
            key-positions = <2 4>;
        };

        TW {
            bindings = <&kp ENTER>;
            key-positions = <16 4>;
        };

        GB {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 5>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <3 15>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <2 14>;
        };

        xcm {
            bindings = <&kp N0>;
            key-positions = <26 28 27>;
        };

        WG {
            bindings = <&kp DELETE>;
            key-positions = <4 17>;
        };

        ASR {
            bindings = <&kp LC(FSLH)>;
            key-positions = <13 14 15>;
        };

        ZM {
            bindings = <&kp LC(A)>;
            key-positions = <27 25 26>;
        };

        EOI {
            bindings = <&o_hat>;
            key-positions = <23 22 21>;
        };

        a_um {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <1 13>;
        };

        o_um {
            bindings = <&kp SEMI>;
            key-positions = <9 21>;
        };

        u_um {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <9 8>;
        };

        egal {
            bindings = <&kp LS(N0)>;
            key-positions = <19 18>;
        };

        apost {
            bindings = <&kp MINUS>;
            key-positions = <19 22>;
        };

        parag {
            bindings = <&kp GRAVE>;
            key-positions = <9 10 8>;
        };

        underscore {
            bindings = <&kp LS(FSLH)>;
            key-positions = <16 17>;
            layers = <3>;
        };
    };

    macros {
        double_arrow: double_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N0) &kp LS(NUBS)>;
            label = "DOUBLE_ARROW";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SLASH &kp LS(NUBS)>;
            label = "ARROW";
        };

        osch: osch {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(O) &kp LS(S) &kp LS(C) &kp LS(H)>;
            label = "OSCH";
        };

        e_hat: e_hat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp E>;
            label = "E_HAT";
        };

        o_hat: o_hat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp O>;
            label = "O_HAT";
        };

        semiColAtEnd: semiColAtEnd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(COMMA)>;
            label = "SEMICOLATEND";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  D  |  H  |  W  |  B  |   |  J  |  F   |  U  |  P  |  Â¨  | BKSP |
            // | CTRL |  A  |  S  |  R  |  T  |  G  |   |  Y  |  N   |  E  |  O  |  I  |  '   |
            // | SHFT |  Z  |  X  |  C  |  M  |  V  |   |  K  |  L   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q        &kp D           &kp H           &kp W         &kp B        &kp J          &kp F         &kp U            &kp P           &kp RIGHT_BRACKET  &none
&none  &mt LCTRL A  &mt LEFT_ALT S  &mt LEFT_GUI R  &mt LSHIFT T  &kp G        &kp Z          &mt RSHIFT N  &mt RIGHT_GUI E  &mt LEFT_ALT O  &mt RCTRL I        &none
&none  &lt 5 Y      &kp X           &kp C           &kp M         &kp V        &kp K          &kp L         &kp COMMA        &mt RALT DOT    &kp FSLH           &none
                                    &mo 1           &mo 3         &kp SPACE    &kp BACKSPACE  &mo 2         &mo 4
            >;
        };

        nav {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &bt BT_PRV  &bt BT_NXT    &none         &none       &none           &kp PAGE_UP    &kp HOME        &kp UP_ARROW   &kp END      &kp INS       &none
&none  &kp LCTRL   &kp LEFT_ALT  &kp LEFT_GUI  &kp LSHIFT  &kp UP_ARROW    &kp PAGE_DOWN  &kp LEFT_ARROW  &kp DOWN       &kp RIGHT    &kp DEL       &none
&none  &none       &none         &none         &caps_word  &none           &trans         &semiColAtEnd   &kp LS(COMMA)  &kp LS(DOT)  &kp LS(FSLH)  &none
                                 &trans        &trans      &kp SPACE       &kp TAB        &trans          &trans
            >;
        };

        sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none  &kp LS(MINUS)     &kp RA(NUMBER_2)  &kp RA(SQT)   &kp RA(NUHS)  &kp RA(N7)       &kp EQUAL      &kp F7  &kp F8    &kp F9  &kp F10  &none
&none  &kp RA(NUMBER_3)  &kp NUHS          &kp LS(N8)    &kp LS(N9)    &kp MINUS        &kp RA(MINUS)  &kp F4  &kp F5    &kp F6  &kp F11  &none
&none  &kp RA(NUBS)      &kp LS(NUMBER_2)  &kp RA(LBKT)  &kp RA(RBKT)  &kp RA(EQUAL)    &kp LS(EQUAL)  &kp F1  &kp F2    &kp F3  &kp F12  &none
                                           &kp NUBS      &kp LS(NUBS)  &kp ESC          &kp RET        &none   &kp RALT
            >;
        };

        num {
            bindings = <
&none  &none      &none         &sk LS(LA(LCTRL))  &sk LS(LA(LC(LEFT_GUI)))  &kp LC(SLASH)    &kp LS(N7)  &kp N7        &kp N8  &kp N9        &kp LS(N3)  &none
&none  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI       &kp LSHIFT                &kp FSLH         &kp LS(N0)  &kp NUMBER_4  &kp N5  &kp NUMBER_6  &kp LS(N1)  &none
&none  &kp RC(A)  &none         &none              &caps_word                &kp X            &kp LS(N6)  &kp N1        &kp N2  &kp N3        &kp LS(N5)  &none
                                &trans             &trans                    &kp SPACE        &kp ENTER   &kp DOT       &kp N0
            >;
        };

        Media {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3       &bt BT_SEL 4    &kp KP_DIVIDE  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MULTIPLY  &trans
&trans  &trans        &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE   &trans          &kp KP_EQUAL   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS      &trans
&trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE    &kp K_APPLICATION  &kp C_MENU      &kp KP_DOT     &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_ENTER     &trans
                                    &trans        &trans             &trans          &trans         &trans           &trans
            >;
        };

        OneHand {
            bindings = <
&none  &kp RIGHT_BRACKET  &kp N7  &kp N8  &kp N9  &sk LCTRL    &trans  &trans  &trans  &trans  &trans  &trans
&none  &kp MINUS          &kp N4  &kp N5  &kp N6  &sk RALT     &trans  &trans  &trans  &trans  &trans  &trans
&none  &none              &kp N1  &kp N2  &kp N3  &sk LSHFT    &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans  &trans  &kp N0       &trans  &trans  &trans
            >;
        };

        one_hand_nav {
            bindings = <
&trans  &trans  &kp HOME       &kp UP_ARROW    &kp END        &sk LCTRL       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT       &kp DOWN_ARROW  &kp RIGHT      &sk LEFT_ALT    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(EQUAL)  &kp EQUAL       &kp RA(MINUS)  &sk LSHIFT      &trans  &trans  &trans  &trans  &trans  &trans
                               &trans          &trans         &trans          &trans  &trans  &trans
            >;
        };

        FN {
            bindings = <
&trans  &sl 4   &kp F7  &kp F8  &kp F9  &kp F10    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        OneHandSym {
            bindings = <
&none  &kp LS(MINUS)     &kp RA(NUMBER_2)  &kp RA(SQT)   &kp RA(NUHS)  &kp RA(N7)       &trans  &trans  &trans  &trans  &trans  &none
&none  &kp RA(NUMBER_3)  &kp NUHS          &kp LS(N8)    &kp LS(N9)    &kp RA(NUBS)     &trans  &trans  &trans  &trans  &trans  &none
&none  &trans            &kp LS(NUMBER_2)  &kp RA(LBKT)  &kp RA(RBKT)  &kp RA(EQUAL)    &trans  &trans  &trans  &trans  &trans  &none
                                           &trans        &kp NUBS      &kp LS(NUBS)     &trans  &none   &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        OneHandNav {
            if-layers = <3 5>;
            then-layer = <6>;
        };

        OneHandSym {
            if-layers = <1 5>;
            then-layer = <8>;
        };

        OneHandFn {
            if-layers = <1 3>;
            then-layer = <7>;
        };
    };
};
